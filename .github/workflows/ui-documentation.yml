name: UI Documentation Generation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/ui/**'
      - 'src/api/**'
      - 'scripts/generate_ui_docs.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/ui/**'
      - 'src/api/**'
  workflow_dispatch:  # Allow manual trigger

jobs:
  generate-ui-docs:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: valuepm
          POSTGRES_PASSWORD: valuepm123
          POSTGRES_DB: valuepm
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install playwright pytest
        playwright install chromium
        playwright install-deps

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://valuepm:valuepm123@localhost:5432/valuepm" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "API_HOST=localhost" >> $GITHUB_ENV
        echo "API_PORT=8000" >> $GITHUB_ENV

    - name: Wait for services
      run: |
        sleep 10
        pg_isready -h localhost -p 5432 -U valuepm
        redis-cli -h localhost -p 6379 ping

    - name: Initialize database
      run: |
        # Run migrations
        python -m alembic upgrade head
        
        # Create test superuser
        python -c "
        from src.db.database import SessionLocal
        from src.services.auth_service import AuthService
        from src.api.schemas import UserCreate
        
        db = SessionLocal()
        auth_service = AuthService(db)
        
        user_create = UserCreate(
            username='admin',
            email='admin@example.com',
            password='admin123',
            is_active=True,
            is_superuser=True
        )
        
        try:
            auth_service.create_user(user_create)
            print('Test user created')
        except Exception as e:
            print(f'User creation failed: {e}')
        finally:
            db.close()
        "

    - name: Populate test data
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from scripts.populate_sample_data import populate_sample_data
        populate_sample_data()
        print('Sample data populated')
        "

    - name: Start API server
      run: |
        python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        # Test API health
        curl -f http://localhost:8000/api/v1/health || exit 1
      env:
        DATABASE_URL: postgresql://valuepm:valuepm123@localhost:5432/valuepm
        REDIS_URL: redis://localhost:6379/0

    - name: Generate UI documentation
      run: |
        python scripts/generate_ui_docs.py
      env:
        API_HOST: localhost
        API_PORT: 8000

    - name: Run visual regression tests
      run: |
        python scripts/visual_regression_test.py
      continue-on-error: true  # Don't fail if no baselines exist yet

    - name: Generate additional documentation
      run: |
        # Create index file for GitHub Pages
        cat > docs/ui/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <meta http-equiv="refresh" content="0; url=./README.md">
            <title>UI Documentation</title>
        </head>
        <body>
            <p>Redirecting to <a href="./README.md">UI Documentation</a></p>
        </body>
        </html>
        EOF
        
        # Create a summary file
        cat > docs/ui/SUMMARY.md << 'EOF'
        # UI Documentation Summary
        
        Generated on: $(date)
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        
        ## Files Generated
        - [Full UI Documentation](README.md)
        - [Screenshots Directory](screenshots/)
        
        ## Visual Tests
        - Login page visual consistency
        - Dashboard layout verification  
        - Responsive design testing
        - Component regression testing
        
        EOF

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ui-documentation-${{ github.sha }}
        path: |
          docs/ui/
          tests/visual/screenshots/
        retention-days: 30

    - name: Deploy to GitHub Pages (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        destination_dir: ui-docs

    - name: Comment on PR with documentation preview
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Check if documentation was generated
          const docsPath = 'docs/ui/README.md';
          if (fs.existsSync(docsPath)) {
            const comment = `## 📸 UI Documentation Preview
            
            UI documentation has been automatically generated for this PR.
            
            ### Changes Detected
            - Streamlit UI modifications detected
            - Screenshots captured automatically
            - Visual regression tests executed
            
            ### Artifacts
            - 📁 [Download Documentation](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - 🔍 [Visual Tests Results](tests/visual/screenshots/)
            
            ### Screenshots Generated
            - Login page
            - Dashboard overview  
            - Project details
            - Create project form
            - Responsive views (desktop/tablet/mobile)
            
            The documentation will be automatically deployed to GitHub Pages when this PR is merged to main.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  visual-regression-test:
    runs-on: ubuntu-latest
    needs: generate-ui-docs
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: valuepm
          POSTGRES_PASSWORD: valuepm123
          POSTGRES_DB: valuepm
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Checkout baseline branch
      run: |
        git fetch origin main:main
        git checkout main -- tests/visual/baselines/ || echo "No baselines found in main"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install playwright pytest
        playwright install chromium

    - name: Set up test environment
      run: |
        echo "DATABASE_URL=postgresql://valuepm:valuepm123@localhost:5432/valuepm" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV

    - name: Initialize test database
      run: |
        python -m alembic upgrade head
        python scripts/create_test_user.py

    - name: Start API server
      run: |
        python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Run visual regression tests with pytest
      run: |
        pytest scripts/visual_regression_test.py -v --html=visual-test-report.html --self-contained-html
      continue-on-error: true

    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      with:
        name: visual-regression-results-${{ github.sha }}
        path: |
          visual-test-report.html
          tests/visual/screenshots/
          tests/visual/baselines/